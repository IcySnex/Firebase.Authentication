using Firebase.Authentication.Internal.Json;
using Firebase.Authentication.Types;
using System.Text.Json.Serialization;

namespace Firebase.Authentication.Responses.IdentityPlatform;

/// <summary>
/// Model to recieve a accounts.createAuthUrl response 
/// </summary>
public class CreateAuthUrlResponse
{
    /// <summary>
    /// Creates a new CreateAuthUrlResponse
    /// </summary>
    /// <param name="authUri">The authorization URI for the requested provider. Present only when a provider ID is set in the request</param>
    /// <param name="isRegistered">Whether the email identifier represents an existing account. Present only when an email identifier is set in the request</param>
    /// <param name="provider">The provider from the request, if provided</param>
    /// <param name="isForExistingProvider">Whether the user has previously signed in with the provider ID in the request. Present only when a registered email identifier is set in the request</param>
    /// <param name="isCaptchaRequired"> Whether a CAPTCHA is needed because there have been too many failed login attempts by the user. Present only when a registered email identifier is set in the request</param>
    /// <param name="sessionId">The session ID from the request, or a random string generated by accounts.createAuthUri if absent</param>
    /// <param name="signinMethods">The list of sign-in methods that the user has previously used</param>
    [JsonConstructor]
    public CreateAuthUrlResponse(
        string? authUri,
        bool? isRegistered,
        Provider? provider,
        bool? isForExistingProvider,
        bool? isCaptchaRequired,
        string sessionId,
        Provider[] signinMethods)
    {
        AuthUri = authUri;
        IsRegistered = isRegistered;
        Provider = provider;
        IsForExistingProvider = isForExistingProvider;
        IsCaptchaRequired = isCaptchaRequired;
        SessionId = sessionId;
        SigninMethods = signinMethods;
    }

    /// <summary>
    /// The authorization URI for the requested provider
    /// <br/>
    /// Present only when a provider ID is set in the request
    /// </summary>
    [JsonPropertyName("authUri")]
    public string? AuthUri { get; }


    /// <summary>
    /// Whether the email identifier represents an existing account
    /// <br/>
    /// Present only when an email identifier is set in the request
    /// </summary>
    [JsonPropertyName("registered")]
    public bool? IsRegistered { get; }

    /// <summary>
    /// The provider from the request, if provided
    /// </summary>
    [JsonConverter(typeof(ProviderJsonConverter))]
    [JsonPropertyName("providerId")]
    public Provider? Provider { get; }

    /// <summary>
    /// Whether the user has previously signed in with the provider ID in the request
    /// <br/>
    /// Present only when a registered email identifier is set in the request
    /// </summary>
    [JsonPropertyName("forExistingProvider")]
    public bool? IsForExistingProvider { get; }

    /// <summary>
    /// Whether a CAPTCHA is needed because there have been too many failed login attempts by the user
    /// <br/>
    /// Present only when a registered email identifier is set in the request
    /// </summary>
    [JsonPropertyName("captchaRequired")]
    public bool? IsCaptchaRequired { get; }

    /// <summary>
    /// The session ID from the request, or a random string generated by accounts.createAuthUri if absent
    /// </summary>
    [JsonPropertyName("sessionId")]
    public string SessionId { get; }

    /// <summary>
    /// The list of sign-in methods that the user has previously used
    /// </summary>
    [JsonConverter(typeof(ProviderArrayJsonConverter))]
    [JsonPropertyName("signinMethods")]
    public Provider[] SigninMethods { get; }
}